// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TakTls
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Compression
import Foundation
import Swift
@_exported import TakTls
import _Concurrency
import _StringProcessing
@objc public protocol TakTlsSocketFactory {
  @objc func connect(host: Swift.String, port: Swift.Int, timeout: Swift.Int) throws -> TakTls.TakTlsSocket
}
@objc @_inheritsConvenienceInitializers public class TakUrlProtocolImpl : Foundation.URLProtocol, Foundation.URLAuthenticationChallengeSender {
  @objc public static var takTlsSocketFactory: TakTls.TakTlsSocketFactory?
  @objc public static var timeout: Swift.Int
  @objc public static var allowSetConnectionCloseHeader: Swift.Bool
  @objc override dynamic public class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic public class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public func startLoading()
  @objc override dynamic public func stopLoading()
  @objc public func use(_ credential: Foundation.URLCredential, for challenge: Foundation.URLAuthenticationChallenge)
  @objc public func continueWithoutCredential(for challenge: Foundation.URLAuthenticationChallenge)
  @objc public func cancel(_ challenge: Foundation.URLAuthenticationChallenge)
  @objc public func rejectProtectionSpaceAndContinue(with challenge: Foundation.URLAuthenticationChallenge)
  @objc public func performDefaultHandling(for challenge: Foundation.URLAuthenticationChallenge)
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: Foundation.URLProtocolClient?)
  @objc deinit
}
@objc public protocol TakTlsSocket {
  @objc func read() throws -> Foundation.Data
  @objc func write(_ writeData: Foundation.Data) throws
  @objc func isOpen() -> Swift.Bool
  @objc func close() throws
}
